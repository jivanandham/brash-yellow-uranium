<!-- Trade Modal -->
<div class="modal fade" id="tradeModal" tabindex="-1" aria-labelledby="tradeModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="tradeModalLabel">Execute Trade</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="tradeAlert" class="alert d-none" role="alert"></div>
                <form id="tradeForm" onsubmit="return executeTrade(event)">
                    <input type="hidden" id="type" name="type">
                    <input type="hidden" id="symbol" name="symbol">
                    
                    <div class="mb-3">
                        <label class="form-label">Company</label>
                        <input type="text" class="form-control" id="companyName" readonly>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Current Price</label>
                        <div class="input-group">
                            <span class="input-group-text">$</span>
                            <input type="text" class="form-control" id="currentPrice" readonly>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="quantity" class="form-label">Quantity</label>
                        <input type="number" class="form-control" id="quantity" name="quantity" min="1" required>
                        <div class="invalid-feedback">
                            Please enter a valid quantity
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Total Value</label>
                        <div class="input-group">
                            <span class="input-group-text">$</span>
                            <input type="text" class="form-control" id="totalValue" readonly>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Available Balance</label>
                        <div class="input-group">
                            <span class="input-group-text">$</span>
                            <input type="text" class="form-control" id="availableBalance" readonly>
                        </div>
                    </div>
                    
                    <div class="d-grid">
                        <button type="submit" class="btn" id="executeTradeBtn">Execute Trade</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Trade Success Modal -->
<div class="modal fade" id="tradeSuccessModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Trade Executed Successfully</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="text-center">
                    <i class="fas fa-check-circle text-success fa-3x mb-3"></i>
                    <h4 id="successMessage"></h4>
                    <p id="successDetails" class="text-muted"></p>
                </div>
            </div>
            <div class="modal-footer">
                <a href="/portfolio" class="btn btn-outline-primary">View Portfolio</a>
                <a href="/transaction-history" class="btn btn-outline-secondary">View Transactions</a>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>
const tradeModal = new bootstrap.Modal(document.getElementById('tradeModal'));
const successModal = new bootstrap.Modal(document.getElementById('tradeSuccessModal'));
let currentWalletBalance = 0;

// Update wallet balance
function updateWalletBalance(balance) {
    currentWalletBalance = balance;
    document.getElementById('availableBalance').value = balance.toFixed(2);
    
    // Update all wallet balance displays on the page
    document.querySelectorAll('.wallet-balance').forEach(el => {
        el.textContent = `$${balance.toFixed(2)}`;
    });
}

// Show trade alert
function showTradeAlert(message, type) {
    const alertEl = document.getElementById('tradeAlert');
    alertEl.className = `alert alert-${type}`;
    alertEl.textContent = message;
    alertEl.classList.remove('d-none');
}

// Initialize trade modal
function openTradeModal(type, symbol, price, company) {
    // Reset alert
    document.getElementById('tradeAlert').classList.add('d-none');
    
    // Set form values
    document.getElementById('type').value = type;
    document.getElementById('symbol').value = symbol;
    document.getElementById('currentPrice').value = parseFloat(price).toFixed(2);
    document.getElementById('companyName').value = company;
    document.getElementById('quantity').value = '';
    document.getElementById('totalValue').value = '';
    
    // Get current wallet balance
    const walletEl = document.querySelector('.wallet-balance');
    if (walletEl) {
        updateWalletBalance(parseFloat(walletEl.textContent.replace('$', '')));
    }
    
    // Update modal UI
    const modalTitle = document.getElementById('tradeModalLabel');
    const executeBtn = document.getElementById('executeTradeBtn');
    
    if (type === 'buy') {
        modalTitle.textContent = 'Buy Stock';
        executeBtn.textContent = 'Buy';
        executeBtn.className = 'btn btn-success';
    } else {
        modalTitle.textContent = 'Sell Stock';
        executeBtn.textContent = 'Sell';
        executeBtn.className = 'btn btn-danger';
    }
    
    tradeModal.show();
}

// Calculate total value when quantity changes
document.getElementById('quantity').addEventListener('input', function(e) {
    const quantity = parseInt(e.target.value) || 0;
    const price = parseFloat(document.getElementById('currentPrice').value);
    const totalValue = (quantity * price).toFixed(2);
    document.getElementById('totalValue').value = totalValue;
    
    const submitBtn = document.getElementById('executeTradeBtn');
    const type = document.getElementById('type').value;
    
    if (quantity <= 0) {
        e.target.classList.add('is-invalid');
        submitBtn.disabled = true;
        showTradeAlert('Please enter a valid quantity', 'danger');
    } else if (type === 'buy' && quantity * price > currentWalletBalance) {
        e.target.classList.add('is-invalid');
        submitBtn.disabled = true;
        showTradeAlert('Insufficient funds for this trade', 'danger');
    } else {
        e.target.classList.remove('is-invalid');
        submitBtn.disabled = false;
        document.getElementById('tradeAlert').classList.add('d-none');
    }
});

// Execute trade
async function executeTrade(event) {
    event.preventDefault();
    
    const executeBtn = document.getElementById('executeTradeBtn');
    executeBtn.disabled = true;
    
    try {
        const formData = {
            type: document.getElementById('type').value,
            symbol: document.getElementById('symbol').value,
            quantity: parseInt(document.getElementById('quantity').value),
            price: parseFloat(document.getElementById('currentPrice').value)
        };
        
        console.log('Executing trade:', formData);
        
        const response = await fetch('/trade/execute', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        });
        
        const result = await response.json();
        console.log('Trade response:', result);
        
        if (response.ok) {
            // Update wallet balance
            updateWalletBalance(result.newBalance);
            
            // Show success modal
            document.getElementById('successMessage').textContent = result.message;
            document.getElementById('successDetails').textContent = 
                `Total Value: $${(formData.quantity * formData.price).toFixed(2)} | New Balance: $${result.newBalance.toFixed(2)}`;
            
            tradeModal.hide();
            successModal.show();
            
            // Refresh the page after a delay
            setTimeout(() => {
                window.location.reload();
            }, 2000);
        } else {
            showTradeAlert(result.message || 'Failed to execute trade', 'danger');
            executeBtn.disabled = false;
        }
    } catch (error) {
        console.error('Error executing trade:', error);
        showTradeAlert('An error occurred while executing the trade', 'danger');
        executeBtn.disabled = false;
    }
}

// Show alert message
function showAlert(message, type, duration = 3000) {
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed top-0 start-50 translate-middle-x mt-3`;
    alertDiv.style.zIndex = '9999';
    alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    `;
    document.body.appendChild(alertDiv);
    
    setTimeout(() => {
        alertDiv.remove();
    }, duration);
}
</script>
