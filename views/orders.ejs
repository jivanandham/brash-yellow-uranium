<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Orders History</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="/css/header-footer.css">
    <link rel="stylesheet" href="/css/navbar.css">
    <link rel="stylesheet" href="/css/user-navbar.css">
    <link rel="stylesheet" href="/css/orders.css">
    <link rel="stylesheet" href="/css/dashboard-header.css">
</head>
<body>
    <%- include('partials/navbar') %>
    <% if (isAuthenticated) { %>
        <%- include('partials/user-navbar') %>
    <% } %>

    <%- include('partials/dashboard-header', {
        title: 'Orders History',
        description: 'Track your trading activity and order status',
        showBalance: false
    }) %>

    <div class="orders-container">
        <!-- Hidden wallet balance for JavaScript use -->
        <div class="d-none">
            <span class="wallet-balance">$<%= typeof user.walletBalance !== 'undefined' ? user.walletBalance.toFixed(2) : '0.00' %></span>
        </div>

        <div class="container mt-4">
            <div class="row mb-4">
                <div class="col">
                    <h2>Order History</h2>
                </div>
                <div class="col-auto">
                </div>
            </div>

            <% if (error) { %>
                <div class="alert alert-danger">
                    <%= error %>
                </div>
            <% } %>

            <% if (orders && orders.length > 0) { %>
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead class="table-light">
                            <tr>
                                <th>Date</th>
                                <th>Stock</th>
                                <th>Type</th>
                                <th>Quantity</th>
                                <th>Price</th>
                                <th>Total</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% orders.forEach(function(order) { %>
                                <tr class="<%= order.type === 'buy' ? 'table-success-light' : 'table-danger-light' %>">
                                    <td><%= new Date(order.orderDate).toLocaleString() %></td>
                                    <td>
                                        <strong><%= order.symbol %></strong>
                                        <% if (order.companyName) { %>
                                            <br><small class="text-muted"><%= order.companyName %></small>
                                        <% } %>
                                    </td>
                                    <td>
                                        <span class="badge <%= order.type === 'buy' ? 'bg-success' : 'bg-danger' %>">
                                            <i class="fas <%= order.type === 'buy' ? 'fa-shopping-cart' : 'fa-dollar-sign' %> me-1"></i>
                                            <%= order.type.toUpperCase() %>
                                        </span>
                                    </td>
                                    <td><%= order.quantity %></td>
                                    <td>$<%= order.price.toFixed(2) %></td>
                                    <td class="<%= order.type === 'buy' ? 'text-danger' : 'text-success' %>">
                                        <%= order.type === 'buy' ? '-' : '+' %>$<%= order.total.toFixed(2) %>
                                    </td>
                                    <td>
                                        <span class="badge <%= order.status === 'completed' ? 'bg-success' : 'bg-warning' %>">
                                            <%= order.status.toUpperCase() %>
                                        </span>
                                    </td>
                                    <td>
                                        <button class="btn btn-sm btn-success" 
                                                onclick="getStockPrice('<%= order.symbol %>', '<%= order.companyName %>')"
                                                title="Buy <%= order.symbol %> again">
                                            <i class="fas fa-shopping-cart"></i> Buy Again
                                        </button>
                                    </td>
                                </tr>
                            <% }); %>
                        </tbody>
                    </table>
                </div>
            <% } else { %>
                <div class="text-center py-5">
                    <i class="fas fa-shopping-cart fa-3x text-muted mb-3"></i>
                    <h4>No Orders Yet</h4>
                    <p class="text-muted">Start trading to see your order history here.</p>
                    <a href="/watchlist" class="btn btn-primary">
                        <i class="fas fa-chart-line"></i> Go to Watchlist
                    </a>
                </div>
            <% } %>
        </div>
    </div>

    <!-- Include Trade Modal -->
    <%- include('partials/trade-modal') %>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script>
        // Initialize modals
        const tradeModal = new bootstrap.Modal(document.getElementById('tradeModal'));
        const successModal = new bootstrap.Modal(document.getElementById('tradeSuccessModal'));
        let currentWalletBalance = parseFloat(document.querySelector('.wallet-balance').textContent.replace('$', ''));

        // Filter orders
        document.getElementById('typeFilter')?.addEventListener('change', filterOrders);
        document.getElementById('statusFilter')?.addEventListener('change', filterOrders);

        function filterOrders() {
            const type = document.getElementById('typeFilter').value;
            const status = document.getElementById('statusFilter').value;
            
            fetch(`/orders/filter?type=${type}&status=${status}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        updateOrdersList(data.orders);
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function updateOrdersList(orders) {
            const tbody = document.querySelector('tbody');
            if (!orders || orders.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="8" class="text-center">No orders found</td>
                    </tr>
                `;
                return;
            }

            tbody.innerHTML = orders.map(order => `
                <tr class="${order.type === 'buy' ? 'table-success' : 'table-danger'}">
                    <td>${new Date(order.createdAt).toLocaleString()}</td>
                    <td>
                        <span class="badge ${order.type === 'buy' ? 'bg-success' : 'bg-danger'}">
                            ${order.type.toUpperCase()}
                        </span>
                    </td>
                    <td>${order.symbol}</td>
                    <td>${order.companyName}</td>
                    <td>${order.quantity}</td>
                    <td>$${order.price.toFixed(2)}</td>
                    <td>$${order.total.toFixed(2)}</td>
                    <td>
                        <span class="badge bg-${order.status === 'completed' ? 'success' : (order.status === 'pending' ? 'warning' : 'secondary')}">
                            ${order.status.charAt(0).toUpperCase() + order.status.slice(1)}
                        </span>
                    </td>
                </tr>
            `).join('');
        }

        // Get stock price and open trade modal
        async function getStockPrice(symbol, companyName) {
            try {
                const response = await fetch(`/trade/price?symbol=${symbol}`);
                const data = await response.json();
                
                if (data.success) {
                    openTradeModal('buy', symbol, data.price, data.companyName || companyName || symbol);
                } else {
                    showAlert(data.message || 'Failed to fetch stock price', 'danger');
                }
            } catch (error) {
                console.error('Error fetching stock price:', error);
                showAlert('Error fetching stock price', 'danger');
            }
        }

        // Open trade modal
        function openTradeModal(type, symbol, price, company) {
            document.getElementById('type').value = type;
            document.getElementById('symbol').value = symbol;
            document.getElementById('companyName').value = company;
            document.getElementById('displayCompanyName').value = company;
            document.getElementById('currentPrice').value = parseFloat(price).toFixed(2);
            document.getElementById('quantity').value = '';
            document.getElementById('totalValue').value = '';
            document.getElementById('availableBalance').value = currentWalletBalance.toFixed(2);
            
            const modalTitle = document.getElementById('tradeModalLabel');
            const executeBtn = document.getElementById('executeTradeBtn');
            
            modalTitle.textContent = 'Buy Stock';
            executeBtn.textContent = 'Buy';
            executeBtn.className = 'btn btn-success';
            
            tradeModal.show();
        }

        // Calculate total value when quantity changes
        document.getElementById('quantity').addEventListener('input', function(e) {
            const quantity = parseInt(e.target.value) || 0;
            const price = parseFloat(document.getElementById('currentPrice').value);
            const totalValue = (quantity * price).toFixed(2);
            document.getElementById('totalValue').value = totalValue;
            
            const submitBtn = document.getElementById('executeTradeBtn');
            
            if (quantity <= 0) {
                e.target.classList.add('is-invalid');
                submitBtn.disabled = true;
            } else if (quantity * price > currentWalletBalance) {
                e.target.classList.add('is-invalid');
                submitBtn.disabled = true;
                showAlert('Insufficient funds for this trade', 'danger');
            } else {
                e.target.classList.remove('is-invalid');
                submitBtn.disabled = false;
            }
        });

        // Execute trade
        document.getElementById('tradeForm').addEventListener('submit', async function(event) {
            event.preventDefault();
            
            const executeBtn = document.getElementById('executeTradeBtn');
            executeBtn.disabled = true;
            
            try {
                const formData = {
                    type: document.getElementById('type').value,
                    symbol: document.getElementById('symbol').value,
                    companyName: document.getElementById('companyName').value,
                    quantity: parseInt(document.getElementById('quantity').value),
                    price: parseFloat(document.getElementById('currentPrice').value)
                };
                
                console.log('Executing trade:', formData);
                
                const response = await fetch('/trade/execute', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });
                
                const result = await response.json();
                console.log('Trade response:', result);
                
                if (result.success) {
                    // Update wallet balance
                    currentWalletBalance = result.newBalance;
                    document.querySelectorAll('.wallet-balance').forEach(el => {
                        el.textContent = `$${result.newBalance.toFixed(2)}`;
                    });
                    
                    // Show success message
                    document.getElementById('successMessage').textContent = result.message;
                    document.getElementById('successDetails').textContent = 
                        `Total Value: $${(formData.quantity * formData.price).toFixed(2)} | New Balance: $${result.newBalance.toFixed(2)}`;
                    
                    tradeModal.hide();
                    successModal.show();
                    
                    // Refresh the page after a delay
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                } else {
                    showAlert(result.message || 'Failed to execute trade', 'danger');
                    executeBtn.disabled = false;
                }
            } catch (error) {
                console.error('Error executing trade:', error);
                showAlert('An error occurred while executing the trade', 'danger');
                executeBtn.disabled = false;
            }
        });

        // Show alert message
        function showAlert(message, type, duration = 3000) {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed top-0 start-50 translate-middle-x mt-3`;
            alertDiv.style.zIndex = '9999';
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            document.body.appendChild(alertDiv);
            
            setTimeout(() => {
                alertDiv.remove();
            }, duration);
        }
    </script>
    <%- include('partials/footer') %>
</body>
</html>