<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stock Watchlist</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        .watchlist-container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 1rem;
        }
        .stock-card {
            border-radius: 10px;
            transition: transform 0.2s;
            margin-bottom: 1rem;
            background-color: white;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }
        .stock-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        .price-up {
            color: #28a745;
        }
        .price-down {
            color: #dc3545;
        }
        .stock-actions {
            opacity: 0;
            transition: opacity 0.2s;
        }
        .stock-card:hover .stock-actions {
            opacity: 1;
        }
        .refresh-icon {
            transition: transform 0.5s ease;
        }
        .refresh-icon.spinning {
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            100% { transform: rotate(360deg); }
        }
        .watchlist-table {
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }
        .watchlist-table th {
            background-color: #f8f9fa;
            font-weight: 600;
            padding: 1rem;
            border-bottom: 2px solid #dee2e6;
        }
        .watchlist-table td {
            padding: 1rem;
            vertical-align: middle;
        }
        .watchlist-table tbody tr:hover {
            background-color: #f8f9fa;
        }
        .price-change {
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-weight: 500;
        }
        .price-change.positive {
            background-color: rgba(40, 167, 69, 0.1);
            color: #28a745;
        }
        .price-change.negative {
            background-color: rgba(220, 53, 69, 0.1);
            color: #dc3545;
        }
        .search-results {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background: white;
            border: 1px solid #dee2e6;
            border-radius: 0 0 4px 4px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            z-index: 1000;
            max-height: 200px;
            overflow-y: auto;
        }
        .search-result-item {
            padding: 0.5rem 1rem;
            cursor: pointer;
            border-bottom: 1px solid #f8f9fa;
        }
        .search-result-item:hover {
            background-color: #f8f9fa;
        }
        .stock-symbol {
            font-weight: 600;
            color: #2c3e50;
        }
        .last-updated {
            font-size: 0.8rem;
            color: #6c757d;
        }
    </style>
</head>
<body>
    <%- include('partials/navbar') %>
    <%- include('partials/user-navbar') %>

    <div class="container mt-4">
        <div class="row">
            <div class="col-md-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h2>My Watchlist</h2>
                    <div class="d-flex align-items-center">
                        <div class="me-3">
                            <strong>Wallet Balance: </strong>
                            <span class="wallet-balance">$<%= user.walletBalance.toFixed(2) %></span>
                        </div>
                        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addStockModal">
                            <i class="fas fa-plus"></i> Add Stock
                        </button>
                    </div>
                </div>

                <% if (watchlist.length === 0) { %>
                    <div class="alert alert-info">
                        Your watchlist is empty. Add some stocks to get started!
                    </div>
                <% } else { %>
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Symbol</th>
                                    <th>Company Name</th>
                                    <th>Sector</th>
                                    <th>Price</th>
                                    <th>Change</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% watchlist.forEach(stock => { %>
                                    <tr>
                                        <td><%= stock.symbol %></td>
                                        <td><%= stock.name %></td>
                                        <td><%= stock.sector || 'N/A' %></td>
                                        <td class="stock-price" data-symbol="<%= stock.symbol %>">$<%= stock.lastPrice.toFixed(2) %></td>
                                        <td class="stock-change" data-symbol="<%= stock.symbol %>">
                                            <% if (stock.priceChange >= 0) { %>
                                                <span class="text-success">+<%= stock.priceChange.toFixed(2) %>%</span>
                                            <% } else { %>
                                                <span class="text-danger"><%= stock.priceChange.toFixed(2) %>%</span>
                                            <% } %>
                                        </td>
                                        <td>
                                            <button class="btn btn-success btn-sm me-2" onclick="openTradeModal('buy', '<%= stock.symbol %>', '<%= stock.lastPrice %>', `<%= stock.name.replace(/'/g, "\\'") %>`)">
                                                <i class="fas fa-shopping-cart"></i> Buy
                                            </button>
                                            <button class="btn btn-danger btn-sm" onclick="removeFromWatchlist('<%= stock.symbol %>')">
                                                <i class="fas fa-trash"></i> Remove
                                            </button>
                                        </td>
                                    </tr>
                                <% }); %>
                            </tbody>
                        </table>
                    </div>
                <% } %>
            </div>
        </div>
    </div>

    <%- include('partials/trade-modal') %>
    <%- include('partials/add-stock-modal') %>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        let currentWalletBalance = <%= user.walletBalance %>;

        // Update wallet balance
        function updateWalletBalance(balance) {
            currentWalletBalance = balance;
            document.getElementById('availableBalance').value = balance.toFixed(2);
            
            // Update all wallet balance displays on the page
            document.querySelectorAll('.wallet-balance').forEach(el => {
                el.textContent = `$${balance.toFixed(2)}`;
            });
        }

        // Show trade alert
        function showTradeAlert(message, type) {
            const alertEl = document.getElementById('tradeAlert');
            alertEl.className = `alert alert-${type}`;
            alertEl.textContent = message;
            alertEl.classList.remove('d-none');
        }

        // Initialize trade modal
        function openTradeModal(type, symbol, price, company) {
            // Reset alert
            document.getElementById('tradeAlert').classList.add('d-none');
            
            // Set form values
            document.getElementById('type').value = type;
            document.getElementById('symbol').value = symbol;
            document.getElementById('currentPrice').value = parseFloat(price).toFixed(2);
            document.getElementById('companyName').value = company;
            document.getElementById('displayCompanyName').value = company;
            document.getElementById('quantity').value = '';
            document.getElementById('totalValue').value = '';
            
            // Update wallet balance display
            document.getElementById('availableBalance').value = currentWalletBalance.toFixed(2);
            
            // Update modal UI
            const modalTitle = document.getElementById('tradeModalLabel');
            const executeBtn = document.getElementById('executeTradeBtn');
            
            if (type === 'buy') {
                modalTitle.textContent = 'Buy Stock';
                executeBtn.textContent = 'Buy';
                executeBtn.className = 'btn btn-success';
            } else {
                modalTitle.textContent = 'Sell Stock';
                executeBtn.textContent = 'Sell';
                executeBtn.className = 'btn btn-danger';
            }
            
            const tradeModal = new bootstrap.Modal(document.getElementById('tradeModal'));
            tradeModal.show();
        }

        // Calculate total value when quantity changes
        document.getElementById('quantity').addEventListener('input', function(e) {
            const quantity = parseInt(e.target.value) || 0;
            const price = parseFloat(document.getElementById('currentPrice').value);
            const totalValue = (quantity * price).toFixed(2);
            document.getElementById('totalValue').value = totalValue;
            
            const submitBtn = document.getElementById('executeTradeBtn');
            const type = document.getElementById('type').value;
            
            if (quantity <= 0) {
                e.target.classList.add('is-invalid');
                submitBtn.disabled = true;
                showTradeAlert('Please enter a valid quantity', 'danger');
            } else if (type === 'buy' && quantity * price > currentWalletBalance) {
                e.target.classList.add('is-invalid');
                submitBtn.disabled = true;
                showTradeAlert('Insufficient funds for this trade', 'danger');
            } else {
                e.target.classList.remove('is-invalid');
                submitBtn.disabled = false;
                document.getElementById('tradeAlert').classList.add('d-none');
            }
        });

        // Execute trade
        async function executeTrade(event) {
            event.preventDefault();
            
            const executeBtn = document.getElementById('executeTradeBtn');
            executeBtn.disabled = true;
            
            try {
                const formData = {
                    type: document.getElementById('type').value,
                    symbol: document.getElementById('symbol').value,
                    companyName: document.getElementById('companyName').value,
                    quantity: parseInt(document.getElementById('quantity').value),
                    price: parseFloat(document.getElementById('currentPrice').value)
                };
                
                console.log('Executing trade:', formData);
                
                const response = await fetch('/trade/execute', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });
                
                const result = await response.json();
                console.log('Trade response:', result);
                
                if (response.ok) {
                    // Update wallet balance
                    updateWalletBalance(result.newBalance);
                    
                    // Show success modal
                    document.getElementById('successMessage').textContent = result.message;
                    document.getElementById('successDetails').textContent = 
                        `Total Value: $${(formData.quantity * formData.price).toFixed(2)} | New Balance: $${result.newBalance.toFixed(2)}`;
                    
                    const tradeModal = bootstrap.Modal.getInstance(document.getElementById('tradeModal'));
                    const successModal = new bootstrap.Modal(document.getElementById('tradeSuccessModal'));
                    tradeModal.hide();
                    successModal.show();
                    
                    // Refresh the page after a delay
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                } else {
                    showTradeAlert(result.message || 'Failed to execute trade', 'danger');
                    executeBtn.disabled = false;
                }
            } catch (error) {
                console.error('Error executing trade:', error);
                showTradeAlert('An error occurred while executing the trade', 'danger');
                executeBtn.disabled = false;
            }
        }

        // Remove stock from watchlist
        async function removeFromWatchlist(symbol) {
            try {
                const response = await fetch(`/api/watchlist/remove/${symbol}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                if (response.ok) {
                    showAlert('Stock removed from watchlist', 'success');
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    const data = await response.json();
                    showAlert(data.message || 'Failed to remove stock', 'danger');
                }
            } catch (error) {
                console.error('Error removing stock:', error);
                showAlert('An error occurred while removing the stock', 'danger');
            }
        }

        // Show alert message
        function showAlert(message, type, duration = 3000) {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed top-0 start-50 translate-middle-x mt-3`;
            alertDiv.style.zIndex = '9999';
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            document.body.appendChild(alertDiv);
            
            setTimeout(() => {
                alertDiv.remove();
            }, duration);
        }

        // Update stock prices periodically
        function updateStockPrices() {
            const symbols = Array.from(document.querySelectorAll('[data-symbol]')).map(el => el.dataset.symbol);
            
            if (symbols.length > 0) {
                fetch(`/api/stock/prices?symbols=${symbols.join(',')}`)
                    .then(response => response.json())
                    .then(data => {
                        Object.entries(data).forEach(([symbol, stockData]) => {
                            const priceEl = document.querySelector(`.stock-price[data-symbol="${symbol}"]`);
                            const changeEl = document.querySelector(`.stock-change[data-symbol="${symbol}"]`);
                            
                            if (priceEl) {
                                priceEl.textContent = `$${stockData.price.toFixed(2)}`;
                            }
                            
                            if (changeEl) {
                                const changeText = stockData.change >= 0 ? 
                                    `+${stockData.change.toFixed(2)}%` : 
                                    `${stockData.change.toFixed(2)}%`;
                                const changeClass = stockData.change >= 0 ? 'text-success' : 'text-danger';
                                changeEl.innerHTML = `<span class="${changeClass}">${changeText}</span>`;
                            }
                        });
                    })
                    .catch(error => console.error('Error updating stock prices:', error));
            }
        }

        // Update prices every 30 seconds
        setInterval(updateStockPrices, 30000);
    </script>
</body>
</html>
