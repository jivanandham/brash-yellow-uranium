<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stock Watchlist</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        .watchlist-container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 1rem;
        }
        .stock-card {
            border-radius: 10px;
            transition: transform 0.2s;
            margin-bottom: 1rem;
            background-color: white;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }
        .stock-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        .price-up {
            color: #28a745;
        }
        .price-down {
            color: #dc3545;
        }
        .stock-actions {
            opacity: 0;
            transition: opacity 0.2s;
        }
        .stock-card:hover .stock-actions {
            opacity: 1;
        }
        .refresh-icon {
            transition: transform 0.5s ease;
        }
        .refresh-icon.spinning {
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            100% { transform: rotate(360deg); }
        }
        .watchlist-table {
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }
        .watchlist-table th {
            background-color: #f8f9fa;
            font-weight: 600;
            padding: 1rem;
            border-bottom: 2px solid #dee2e6;
        }
        .watchlist-table td {
            padding: 1rem;
            vertical-align: middle;
        }
        .watchlist-table tbody tr:hover {
            background-color: #f8f9fa;
        }
        .price-change {
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-weight: 500;
        }
        .price-change.positive {
            background-color: rgba(40, 167, 69, 0.1);
            color: #28a745;
        }
        .price-change.negative {
            background-color: rgba(220, 53, 69, 0.1);
            color: #dc3545;
        }
        .search-results {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background: white;
            border: 1px solid #dee2e6;
            border-radius: 0 0 4px 4px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            z-index: 1000;
            max-height: 200px;
            overflow-y: auto;
        }
        .search-result-item {
            padding: 0.5rem 1rem;
            cursor: pointer;
            border-bottom: 1px solid #f8f9fa;
        }
        .search-result-item:hover {
            background-color: #f8f9fa;
        }
        .stock-symbol {
            font-weight: 600;
            color: #2c3e50;
        }
        .last-updated {
            font-size: 0.8rem;
            color: #6c757d;
        }
    </style>
</head>
<body>
    <%- include('partials/navbar') %>
    <%- include('partials/user-navbar') %>

    <div class="watchlist-container">
        <!-- Header Section -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2>Watchlist</h2>
            <div class="btn-group">
                <button class="btn btn-outline-primary" onclick="refreshWatchlist()">
                    <i class="fas fa-sync-alt refresh-icon me-2"></i> Refresh
                </button>
                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addStockModal">
                    <i class="fas fa-plus me-2"></i> Add Stock
                </button>
            </div>
        </div>

        <!-- Watchlist Table -->
        <div class="table-responsive">
            <table class="table watchlist-table">
                <thead>
                    <tr>
                        <th style="width: 25%">Stock</th>
                        <th style="width: 20%">Sector</th>
                        <th style="width: 15%" class="text-end">Price</th>
                        <th style="width: 15%" class="text-end">Change</th>
                        <th style="width: 15%" class="text-end">Last Updated</th>
                        <th style="width: 10%" class="text-end">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% if (watchlist && watchlist.length > 0) { %>
                        <% watchlist.forEach(stock => { %>
                            <tr id="stock-<%= stock.symbol %>">
                                <td>
                                    <div class="stock-symbol"><%= stock.symbol %></div>
                                    <div class="company-name text-muted"><%= stock.name %></div>
                                </td>
                                <td><%= stock.sector %></td>
                                <td class="text-end price-value">$<%= stock.lastPrice.toFixed(2) %></td>
                                <td class="text-end">
                                    <span class="price-change <%= stock.priceChange >= 0 ? 'positive' : 'negative' %>">
                                        <%= stock.priceChange >= 0 ? '+' : '' %><%= stock.priceChange.toFixed(2) %>%
                                    </span>
                                </td>
                                <td class="text-end last-updated">
                                    <%= new Date(stock.lastUpdated).toLocaleString() %>
                                </td>
                                <td class="text-end">
                                    <div class="btn-group">
                                        <button class="btn btn-sm btn-outline-primary" onclick="openTradeModal('buy', '<%= stock.symbol %>', <%= stock.lastPrice %>)">
                                            Buy
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" onclick="removeFromWatchlist('<%= stock.symbol %>')">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        <% }); %>
                    <% } else { %>
                        <tr>
                            <td colspan="6" class="text-center py-4">
                                <div class="text-muted">
                                    <i class="fas fa-search mb-3" style="font-size: 2rem;"></i>
                                    <p>Your watchlist is empty. Start by adding some stocks!</p>
                                </div>
                            </td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
        </div>
    </div>

    <!-- Add Stock Modal -->
    <div class="modal fade" id="addStockModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Stock to Watchlist</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3 position-relative">
                        <label for="stockSearch" class="form-label">Search Stock</label>
                        <input type="text" class="form-control" id="stockSearch" placeholder="Enter stock symbol or company name">
                        <div id="searchResults" class="search-results d-none"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Trade Modal -->
    <%- include('partials/trade-modal') %>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        let searchTimeout;
        const searchInput = document.getElementById('stockSearch');
        const searchResults = document.getElementById('searchResults');

        // Real-time stock search
        searchInput.addEventListener('input', function(e) {
            clearTimeout(searchTimeout);
            const query = e.target.value.trim();
            
            if (query.length < 2) {
                searchResults.classList.add('d-none');
                return;
            }

            searchTimeout = setTimeout(async () => {
                try {
                    const response = await fetch(`/stock/search?q=${encodeURIComponent(query)}`);
                    const data = await response.json();

                    if (data.success && data.results.length > 0) {
                        searchResults.innerHTML = data.results.map(stock => `
                            <div class="search-result-item" onclick="addToWatchlist('${stock.symbol}', '${stock.name}', '${stock.sector}')">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <strong>${stock.symbol}</strong>
                                        <div class="small text-muted">${stock.name}</div>
                                    </div>
                                    <div class="text-end">
                                        <div>$${stock.price.toFixed(2)}</div>
                                        <div class="small ${stock.change >= 0 ? 'text-success' : 'text-danger'}">
                                            ${stock.change >= 0 ? '+' : ''}${stock.change.toFixed(2)}%
                                        </div>
                                    </div>
                                </div>
                            </div>
                        `).join('');
                        searchResults.classList.remove('d-none');
                    } else {
                        searchResults.innerHTML = '<div class="p-3 text-muted">No results found</div>';
                        searchResults.classList.remove('d-none');
                    }
                } catch (error) {
                    console.error('Search error:', error);
                    showAlert('Failed to search stocks', 'danger');
                }
            }, 300);
        });

        // Add stock to watchlist
        async function addToWatchlist(symbol, name, sector) {
            try {
                const response = await fetch('/watchlist/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ symbol, name, sector })
                });

                const data = await response.json();
                
                if (data.success) {
                    showAlert('Stock added to watchlist', 'success');
                    location.reload();
                } else {
                    showAlert(data.message || 'Failed to add stock', 'danger');
                }
            } catch (error) {
                console.error('Add to watchlist error:', error);
                showAlert('Failed to add stock to watchlist', 'danger');
            }

            // Close modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('addStockModal'));
            modal.hide();
        }

        // Remove stock from watchlist
        async function removeFromWatchlist(symbol) {
            if (!confirm(`Remove ${symbol} from watchlist?`)) {
                return;
            }

            try {
                const response = await fetch('/watchlist/remove', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ symbol })
                });

                const data = await response.json();
                
                if (data.success) {
                    const row = document.getElementById(`stock-${symbol}`);
                    row.remove();
                    showAlert('Stock removed from watchlist', 'success');
                    
                    // If no stocks left, show empty state
                    if (document.querySelectorAll('.watchlist-table tbody tr').length === 0) {
                        document.querySelector('.watchlist-table tbody').innerHTML = `
                            <tr>
                                <td colspan="6" class="text-center py-4">
                                    <div class="text-muted">
                                        <i class="fas fa-search mb-3" style="font-size: 2rem;"></i>
                                        <p>Your watchlist is empty. Start by adding some stocks!</p>
                                    </div>
                                </td>
                            </tr>
                        `;
                    }
                } else {
                    showAlert(data.message || 'Failed to remove stock', 'danger');
                }
            } catch (error) {
                console.error('Remove from watchlist error:', error);
                showAlert('Failed to remove stock from watchlist', 'danger');
            }
        }

        // Refresh watchlist prices
        async function refreshWatchlist() {
            const refreshIcon = document.querySelector('.refresh-icon');
            refreshIcon.classList.add('spinning');

            try {
                const response = await fetch('/watchlist/refresh');
                const data = await response.json();
                
                if (data.success) {
                    data.watchlist.forEach(stock => {
                        const row = document.getElementById(`stock-${stock.symbol}`);
                        if (row) {
                            row.querySelector('.price-value').textContent = `$${stock.lastPrice.toFixed(2)}`;
                            const changeElement = row.querySelector('.price-change');
                            changeElement.textContent = `${stock.priceChange >= 0 ? '+' : ''}${stock.priceChange.toFixed(2)}%`;
                            changeElement.className = `price-change ${stock.priceChange >= 0 ? 'positive' : 'negative'}`;
                            row.querySelector('.last-updated').textContent = new Date(stock.lastUpdated).toLocaleString();
                        }
                    });
                    showAlert('Prices updated successfully', 'success');
                } else {
                    showAlert(data.message || 'Failed to refresh prices', 'danger');
                }
            } catch (error) {
                console.error('Refresh error:', error);
                showAlert('Failed to refresh prices', 'danger');
            }

            refreshIcon.classList.remove('spinning');
        }

        // Auto-refresh prices every minute
        setInterval(refreshWatchlist, 60000);

        // Show alert message
        function showAlert(message, type) {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed top-0 start-50 translate-middle-x mt-3`;
            alertDiv.style.zIndex = '9999';
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            document.body.appendChild(alertDiv);
            setTimeout(() => alertDiv.remove(), 3000);
        }

        // Close search results when clicking outside
        document.addEventListener('click', function(e) {
            if (!searchInput.contains(e.target) && !searchResults.contains(e.target)) {
                searchResults.classList.add('d-none');
            }
        });
    </script>
</body>
</html>
