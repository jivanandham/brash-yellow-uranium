<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Notifications - Admin Dashboard</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    .notifications-page {
      background-color: #f8f9fa;
      min-height: 100vh;
      padding: 2rem 0;
    }

    .page-header {
      margin-bottom: 2rem;
    }

    .page-header h1 {
      font-size: 2rem;
      font-weight: 600;
      color: #2c3e50;
      margin-bottom: 0.5rem;
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }

    .page-header p {
      color: #6c757d;
      font-size: 1.1rem;
      margin-bottom: 0;
    }

    .notifications-container {
      background: #fff;
      border-radius: 1rem;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
      padding: 1.5rem;
      border: 1px solid rgba(0, 0, 0, 0.05);
    }

    .filter-bar {
      background: #f8f9fa;
      border-radius: 0.75rem;
      padding: 1rem 1.5rem;
      margin-bottom: 1.5rem;
      display: flex;
      align-items: center;
      gap: 1rem;
      border: 1px solid #e9ecef;
    }

    .form-switch {
      padding-left: 3.5rem;
      margin-bottom: 0;
    }

    .form-switch .form-check-input {
      width: 3rem;
      height: 1.5rem;
      margin-left: -3.5rem;
      background-color: #e9ecef;
      border: none;
      cursor: pointer;
    }

    .form-switch .form-check-input:checked {
      background-color: #3498db;
      border-color: #3498db;
    }

    .form-switch .form-check-label {
      color: #2c3e50;
      font-weight: 500;
      cursor: pointer;
    }

    .notification-item {
      background: #fff;
      border: 1px solid #e9ecef;
      border-radius: 0.75rem;
      padding: 1.5rem;
      margin-bottom: 1rem;
      transition: all 0.2s ease;
      position: relative;
    }

    .notification-item:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    }

    .notification-item.unread {
      background: #f8f9fa;
      border-left: 4px solid #3498db;
    }

    .notification-type {
      position: absolute;
      top: 1.5rem;
      right: 1.5rem;
      padding: 0.35rem 1rem;
      border-radius: 2rem;
      font-size: 0.75rem;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .notification-type.info {
      background: #e3f2fd;
      color: #1976d2;
    }

    .notification-type.success {
      background: #e8f5e9;
      color: #2e7d32;
    }

    .notification-type.warning {
      background: #fff3e0;
      color: #f57c00;
    }

    .notification-type.error {
      background: #ffebee;
      color: #c62828;
    }

    .notification-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 1rem;
      padding-right: 6rem;
    }

    .notification-title {
      font-size: 1.1rem;
      font-weight: 600;
      color: #2c3e50;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .notification-title i {
      color: #3498db;
    }

    .notification-time {
      font-size: 0.875rem;
      color: #6c757d;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .notification-message {
      color: #2c3e50;
      line-height: 1.5;
      margin-bottom: 1.25rem;
    }

    .notification-actions {
      display: flex;
      gap: 0.75rem;
    }

    .btn-action {
      padding: 0.5rem 1rem;
      font-size: 0.875rem;
      font-weight: 500;
      border-radius: 0.5rem;
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      transition: all 0.2s ease;
      border: none;
    }

    .btn-action.primary {
      background-color: #3498db;
      color: white;
    }

    .btn-action.primary:hover {
      background-color: #2980b9;
    }

    .btn-action.danger {
      background-color: #fff;
      color: #e74c3c;
      border: 1px solid #e74c3c;
    }

    .btn-action.danger:hover {
      background-color: #e74c3c;
      color: white;
    }

    .empty-state {
      text-align: center;
      padding: 4rem 2rem;
    }

    .empty-state i {
      font-size: 3rem;
      color: #95a5a6;
      margin-bottom: 1.5rem;
    }

    .empty-state h3 {
      color: #2c3e50;
      font-size: 1.5rem;
      margin-bottom: 0.75rem;
    }

    .empty-state p {
      color: #7f8c8d;
      margin-bottom: 0;
    }

    .pagination {
      margin-top: 2rem;
      gap: 0.25rem;
    }

    .page-link {
      color: #2c3e50;
      border: 1px solid #e9ecef;
      padding: 0.5rem 1rem;
      border-radius: 0.375rem;
      transition: all 0.2s ease;
    }

    .page-link:hover {
      background-color: #e9ecef;
      border-color: #dee2e6;
      color: #1a252f;
    }

    .page-item.active .page-link {
      background-color: #3498db;
      border-color: #3498db;
      color: white;
    }

    .page-item.disabled .page-link {
      color: #6c757d;
      pointer-events: none;
      background-color: #f8f9fa;
      border-color: #e9ecef;
    }

    @media (max-width: 768px) {
      .notifications-page {
        padding: 1rem 0;
      }

      .filter-bar {
        flex-direction: column;
        align-items: stretch;
        padding: 1rem;
      }

      .notification-header {
        flex-direction: column;
        gap: 0.5rem;
        padding-right: 0;
      }

      .notification-type {
        position: static;
        display: inline-block;
        margin-bottom: 0.75rem;
      }

      .notification-actions {
        flex-direction: column;
      }

      .btn-action {
        width: 100%;
        justify-content: center;
      }
    }
  </style>
</head>
<body class="notifications-page">
  <%- include('../partials/navbar') %>
  <%- include('../partials/admin-navbar') %>

  <div class="container">
    <div class="page-header">
      <h1>
        <i class="fas fa-bell text-primary"></i>
        Notifications
      </h1>
      <p>Stay updated with system alerts and important messages</p>
    </div>

    <div class="notifications-container">
      <div class="filter-bar">
        <div class="form-switch">
          <input class="form-check-input" type="checkbox" id="showUnreadOnly" onchange="toggleUnread()">
          <label class="form-check-label" for="showUnreadOnly">Show unread notifications only</label>
        </div>
        <div class="ms-auto">
          <button class="btn-action primary" onclick="markAllAsRead()">
            <i class="fas fa-check-double"></i>
            Mark All as Read
          </button>
        </div>
      </div>

      <div id="notificationsContainer">
        <% if (notifications && notifications.length > 0) { %>
          <% notifications.forEach(notification => { %>
            <div class="notification-item <%= !notification.read ? 'unread' : '' %>" id="notification-<%= notification._id %>">
              <span class="notification-type <%= notification.type %>">
                <%= notification.type.charAt(0).toUpperCase() + notification.type.slice(1) %>
              </span>
              <div class="notification-header">
                <div class="notification-title">
                  <i class="<%= notification.icon %>"></i>
                  <%= notification.title %>
                </div>
                <div class="notification-time">
                  <i class="fas fa-clock"></i>
                  <%= new Date(notification.date).toLocaleString() %>
                </div>
              </div>
              <div class="notification-message">
                <%= notification.message %>
              </div>
              <div class="notification-actions">
                <% if (!notification.read) { %>
                  <button class="btn-action primary" onclick="markAsRead('<%= notification._id %>')">
                    <i class="fas fa-check"></i>
                    Mark as Read
                  </button>
                <% } %>
                <button class="btn-action danger" onclick="deleteNotification('<%= notification._id %>')">
                  <i class="fas fa-trash"></i>
                  Delete
                </button>
              </div>
            </div>
          <% }) %>
        <% } else { %>
          <div class="empty-state">
            <i class="fas fa-bell-slash"></i>
            <h3>No Notifications</h3>
            <p>You're all caught up! Check back later for new notifications.</p>
          </div>
        <% } %>
      </div>

      <% if (totalPages > 1) { %>
        <nav aria-label="Notifications pagination">
          <ul class="pagination justify-content-center">
            <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
              <a class="page-link" href="?page=<%= currentPage - 1 %>" <%= currentPage === 1 ? 'tabindex="-1" aria-disabled="true"' : '' %>>
                <i class="fas fa-chevron-left"></i>
              </a>
            </li>

            <% for(let i = 1; i <= totalPages; i++) { %>
              <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                <a class="page-link" href="?page=<%= i %>"><%= i %></a>
              </li>
            <% } %>

            <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
              <a class="page-link" href="?page=<%= currentPage + 1 %>" <%= currentPage === totalPages ? 'tabindex="-1" aria-disabled="true"' : '' %>>
                <i class="fas fa-chevron-right"></i>
              </a>
            </li>
          </ul>
        </nav>
      <% } %>
    </div>
  </div>

  <%- include('../partials/footer') %>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
  <script>
    // Mark single notification as read
    async function markAsRead(notificationId) {
      try {
        const response = await fetch(`/admin/notifications/${notificationId}/read`, {
          method: 'POST'
        });

        if (response.ok) {
          const notification = document.getElementById(`notification-${notificationId}`);
          notification.classList.remove('unread');
          const markAsReadBtn = notification.querySelector('.btn-action.primary');
          if (markAsReadBtn) markAsReadBtn.remove();
          updateNotificationCount();
        } else {
          throw new Error('Failed to mark notification as read');
        }
      } catch (error) {
        console.error('Error:', error);
        showToast('error', 'Failed to mark notification as read');
      }
    }

    // Delete notification
    async function deleteNotification(notificationId) {
      if (!confirm('Are you sure you want to delete this notification?')) return;

      try {
        const response = await fetch(`/admin/notifications/${notificationId}`, {
          method: 'DELETE'
        });

        if (response.ok) {
          const notification = document.getElementById(`notification-${notificationId}`);
          notification.style.opacity = '0';
          setTimeout(() => {
            notification.remove();
            if (document.querySelectorAll('.notification-item').length === 0) {
              location.reload(); // Refresh to show empty state
            }
          }, 300);
          updateNotificationCount();
        } else {
          throw new Error('Failed to delete notification');
        }
      } catch (error) {
        console.error('Error:', error);
        showToast('error', 'Failed to delete notification');
      }
    }

    // Mark all notifications as read
    async function markAllAsRead() {
      try {
        const response = await fetch('/admin/notifications/mark-all-read', {
          method: 'POST'
        });

        if (response.ok) {
          const unreadNotifications = document.querySelectorAll('.notification-item.unread');
          unreadNotifications.forEach(notification => {
            notification.classList.remove('unread');
            const markAsReadBtn = notification.querySelector('.btn-action.primary');
            if (markAsReadBtn) markAsReadBtn.remove();
          });
          updateNotificationCount();
          showToast('success', 'All notifications marked as read');
        } else {
          throw new Error('Failed to mark all notifications as read');
        }
      } catch (error) {
        console.error('Error:', error);
        showToast('error', 'Failed to mark all notifications as read');
      }
    }

    // Toggle unread notifications
    function toggleUnread() {
      const showUnreadOnly = document.getElementById('showUnreadOnly').checked;
      const notifications = document.querySelectorAll('.notification-item');
      
      notifications.forEach(notification => {
        if (showUnreadOnly) {
          notification.style.display = notification.classList.contains('unread') ? 'block' : 'none';
        } else {
          notification.style.display = 'block';
        }
      });
    }

    // Update notification count in navbar
    async function updateNotificationCount() {
      try {
        const response = await fetch('/admin/notifications/unread-count');
        const data = await response.json();
        
        const countElement = document.getElementById('notificationCount');
        if (countElement) {
          countElement.textContent = data.count > 0 ? data.count : '';
          countElement.style.display = data.count > 0 ? 'block' : 'none';
        }
      } catch (error) {
        console.error('Error updating notification count:', error);
      }
    }

    // Show toast messages
    function showToast(type, message) {
      // You can implement a toast notification system here
      console.log(`${type}: ${message}`);
    }
  </script>
</body>
</html>
