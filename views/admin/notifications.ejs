<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Notifications - Admin Dashboard</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    body {
      background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
      min-height: 100vh;
      font-family: 'Segoe UI', system-ui, -apple-system, sans-serif;
    }

    .container {
      padding: 2rem 1rem;
      max-width: 1200px;
    }

    .page-header {
      margin-bottom: 2rem;
      color: #2d3748;
    }

    .page-header h1 {
      font-size: 2.5rem;
      font-weight: 600;
      margin-bottom: 0.5rem;
    }

    .page-header p {
      color: #718096;
      font-size: 1.1rem;
      margin-bottom: 0;
    }

    .notifications-container {
      background: rgba(255, 255, 255, 0.95);
      border-radius: 20px;
      padding: 2rem;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    }

    .notification-item {
      padding: 1.5rem;
      border-radius: 10px;
      background: #f7fafc;
      margin-bottom: 1rem;
      transition: all 0.3s ease;
      position: relative;
    }

    .notification-item:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    }

    .notification-item.unread {
      background: #ebf8ff;
      border-left: 4px solid #4299e1;
    }

    .notification-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 0.5rem;
    }

    .notification-title {
      font-weight: 600;
      color: #2d3748;
      font-size: 1.1rem;
      margin-right: 1rem;
    }

    .notification-time {
      font-size: 0.875rem;
      color: #718096;
    }

    .notification-message {
      color: #4a5568;
      margin-bottom: 1rem;
    }

    .notification-actions {
      display: flex;
      gap: 0.5rem;
    }

    .profile-action-btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
      padding: 0.75rem 1.5rem;
      font-size: 1rem;
      font-weight: 500;
      color: #ffffff;
      background: var(--gradient-primary);
      border: none;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.3s ease;
      text-decoration: none;
      width: auto;
    }

    .profile-action-btn:hover {
      transform: translateY(-1px);
      opacity: 0.95;
      color: white;
    }

    .profile-action-btn.small {
      padding: 0.5rem 1rem;
      font-size: 0.875rem;
    }

    .notification-type {
      position: absolute;
      top: 1rem;
      right: 1rem;
      padding: 0.25rem 0.75rem;
      border-radius: 20px;
      font-size: 0.75rem;
      font-weight: 500;
    }

    .notification-type.info {
      background: #ebf8ff;
      color: #2b6cb0;
    }

    .notification-type.success {
      background: #c6f6d5;
      color: #22543d;
    }

    .notification-type.warning {
      background: #feebc8;
      color: #744210;
    }

    .notification-type.error {
      background: #fed7d7;
      color: #822727;
    }

    .empty-state {
      text-align: center;
      padding: 3rem;
    }

    .empty-state i {
      font-size: 4rem;
      color: #a0aec0;
      margin-bottom: 1rem;
    }

    .empty-state h3 {
      color: #2d3748;
      margin-bottom: 0.5rem;
    }

    .empty-state p {
      color: #718096;
      margin-bottom: 1.5rem;
    }

    .filter-bar {
      background: white;
      padding: 1rem;
      border-radius: 10px;
      margin-bottom: 1rem;
      display: flex;
      gap: 1rem;
      align-items: center;
      flex-wrap: wrap;
    }

    @media (max-width: 768px) {
      .container {
        padding: 1rem;
      }

      .page-header h1 {
        font-size: 2rem;
      }

      .notification-header {
        flex-direction: column;
      }

      .notification-time {
        margin-top: 0.5rem;
      }

      .notification-actions {
        flex-direction: column;
        gap: 0.5rem;
      }

      .btn-custom {
        width: 100%;
      }
    }
  </style>
</head>
<body>
  <%- include('../partials/navbar') %>
  <%- include('../partials/admin-navbar') %>

  <div class="container">
    <div class="page-header">
      <h1><i class="fas fa-bell me-2"></i>Notifications</h1>
      <p>View and manage your notifications</p>
    </div>

    <div class="notifications-container">
      <div class="filter-bar">
        <div class="form-check form-switch">
          <input class="form-check-input" type="checkbox" id="showUnreadOnly" onchange="toggleUnread()">
          <label class="form-check-label" for="showUnreadOnly">Show unread only</label>
        </div>
        <div class="ms-auto">
          <button class="profile-action-btn" onclick="markAllAsRead()">
            <i class="fas fa-check-double me-2"></i>Mark All as Read
          </button>
        </div>
      </div>

      <div id="notificationsContainer">
        <% if (notifications && notifications.length > 0) { %>
          <% notifications.forEach(notification => { %>
            <div class="notification-item <%= !notification.read ? 'unread' : '' %>" id="notification-<%= notification._id %>">
              <span class="notification-type <%= notification.type %>">
                <%= notification.type.charAt(0).toUpperCase() + notification.type.slice(1) %>
              </span>
              <div class="notification-header">
                <div class="notification-title">
                  <i class="<%= notification.icon %> me-2"></i>
                  <%= notification.title %>
                </div>
                <div class="notification-time">
                  <i class="fas fa-clock me-1"></i>
                  <%= new Date(notification.date).toLocaleString() %>
                </div>
              </div>
              <div class="notification-message">
                <%= notification.message %>
              </div>
              <div class="notification-actions">
                <% if (!notification.read) { %>
                  <button class="profile-action-btn small" onclick="markAsRead('<%= notification._id %>')">
                    <i class="fas fa-check me-1"></i>Mark as Read
                  </button>
                <% } %>
                <button class="profile-action-btn small" onclick="deleteNotification('<%= notification._id %>')">
                  <i class="fas fa-trash me-1"></i>Delete
                </button>
              </div>
            </div>
          <% }) %>
        <% } else { %>
          <div class="empty-state">
            <i class="fas fa-bell-slash"></i>
            <h3>No Notifications</h3>
            <p>You're all caught up! Check back later for new notifications.</p>
          </div>
        <% } %>
      </div>

      <% if (totalPages > 1) { %>
        <nav aria-label="Notifications navigation" class="mt-4">
          <ul class="pagination justify-content-center">
            <% if (currentPage > 1) { %>
              <li class="page-item">
                <a class="page-link" href="?page=<%= currentPage - 1 %>">
                  <i class="fas fa-chevron-left"></i>
                </a>
              </li>
            <% } %>

            <% for(let i = 1; i <= totalPages; i++) { %>
              <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                <a class="page-link" href="?page=<%= i %>"><%= i %></a>
              </li>
            <% } %>

            <% if (currentPage < totalPages) { %>
              <li class="page-item">
                <a class="page-link" href="?page=<%= currentPage + 1 %>">
                  <i class="fas fa-chevron-right"></i>
                </a>
              </li>
            <% } %>
          </ul>
        </nav>
      <% } %>
    </div>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
  <script>
    async function markAsRead(notificationId) {
      try {
        const response = await fetch(`/admin/notifications/${notificationId}/read`, {
          method: 'POST'
        });

        if (response.ok) {
          const notification = document.getElementById(`notification-${notificationId}`);
          notification.classList.remove('unread');
          const markAsReadBtn = notification.querySelector('.profile-action-btn.small');
          if (markAsReadBtn) markAsReadBtn.remove();
          updateNotificationCount();
        } else {
          throw new Error('Failed to mark notification as read');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Failed to mark notification as read. Please try again.');
      }
    }

    async function deleteNotification(notificationId) {
      if (!confirm('Are you sure you want to delete this notification?')) return;

      try {
        const response = await fetch(`/admin/notifications/${notificationId}`, {
          method: 'DELETE'
        });

        if (response.ok) {
          const notification = document.getElementById(`notification-${notificationId}`);
          notification.remove();
          updateNotificationCount();
        } else {
          throw new Error('Failed to delete notification');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Failed to delete notification. Please try again.');
      }
    }

    async function markAllAsRead() {
      try {
        const response = await fetch('/admin/notifications/mark-all-read', {
          method: 'POST'
        });

        if (response.ok) {
          const unreadNotifications = document.querySelectorAll('.notification-item.unread');
          unreadNotifications.forEach(notification => {
            notification.classList.remove('unread');
            const markAsReadBtn = notification.querySelector('.profile-action-btn.small');
            if (markAsReadBtn) markAsReadBtn.remove();
          });
          updateNotificationCount();
        } else {
          throw new Error('Failed to mark all notifications as read');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Failed to mark all notifications as read. Please try again.');
      }
    }

    function toggleUnread() {
      const showUnreadOnly = document.getElementById('showUnreadOnly').checked;
      const notifications = document.querySelectorAll('.notification-item');
      
      notifications.forEach(notification => {
        if (showUnreadOnly) {
          notification.style.display = notification.classList.contains('unread') ? 'block' : 'none';
        } else {
          notification.style.display = 'block';
        }
      });
    }

    async function updateNotificationCount() {
      try {
        const response = await fetch('/admin/notifications/unread-count');
        const data = await response.json();
        
        const countElement = document.getElementById('notificationCount');
        if (countElement) {
          if (data.count > 0) {
            countElement.textContent = data.count > 99 ? '99+' : data.count;
            countElement.style.display = 'inline-block';
          } else {
            countElement.style.display = 'none';
          }
        }
      } catch (error) {
        console.error('Error updating notification count:', error);
      }
    }
  </script>
</body>
</html>
