<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Portfolio - StockBull Trading</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="/css/header-footer.css">
    <link rel="stylesheet" href="/css/navbar.css">
    <link rel="stylesheet" href="/css/user-navbar.css">
    <style>
        body {
            background-color: #f4f7f6;
            font-family: 'Segoe UI', system-ui, -apple-system, sans-serif;
        }
        
        .portfolio-header {
            background: linear-gradient(135deg, #1a237e 0%, #0d47a1 100%);
            color: white;
            padding: 2rem 0;
            margin-bottom: 2rem;
        }

        .card {
            border: none;
            border-radius: 12px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.05);
            transition: all 0.3s ease;
            margin-bottom: 1.5rem;
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        }

        .metric-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            height: 100%;
        }

        .metric-value {
            font-size: 1.8rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .metric-label {
            color: #6c757d;
            font-size: 1rem;
            margin-bottom: 0;
        }

        .table th {
            font-weight: 600;
            color: #2c3e50;
        }

        .btn-trade {
            border-radius: 20px;
            padding: 0.375rem 1.5rem;
        }

        .stock-action {
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        tr:hover .stock-action {
            opacity: 1;
        }
    </style>
</head>
<body>
    <%- include('partials/navbar') %>
    <% if (isAuthenticated) { %>
        <%- include('partials/user-navbar') %>
    <% } %>

    <!-- Portfolio Header -->
    <div class="portfolio-header">
        <div class="container">
            <div class="row align-items-center">
                <div class="col">
                    <h1 class="mb-0">Portfolio</h1>
                    <p class="mb-0">Track and manage your investments</p>
                </div>
                <div class="col-auto">
                    <button class="btn btn-light" onclick="openTradeModal()">
                        <i class="bi bi-plus-lg"></i> New Trade
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <!-- Portfolio Metrics -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="metric-card">
                    <p class="metric-label">Total Investment</p>
                    <h3 class="metric-value text-primary">$<%= portfolio.totalInvestment.toFixed(2) %></h3>
                    <small class="text-muted">Capital deployed</small>
                </div>
            </div>
            <div class="col-md-3">
                <div class="metric-card">
                    <p class="metric-label">Current Value</p>
                    <h3 class="metric-value text-primary">$<%= portfolio.totalCurrentValue.toFixed(2) %></h3>
                    <small class="text-muted">Market value</small>
                </div>
            </div>
            <div class="col-md-3">
                <div class="metric-card">
                    <p class="metric-label">Total Profit/Loss</p>
                    <h3 class="metric-value <%= portfolio.totalProfitLoss >= 0 ? 'text-success' : 'text-danger' %>">
                        <%= portfolio.totalProfitLoss >= 0 ? '+' : '' %>$<%= portfolio.totalProfitLoss.toFixed(2) %>
                    </h3>
                    <small class="text-muted">
                        (<%= portfolio.totalProfitLossPercent.toFixed(2) %>%)
                    </small>
                </div>
            </div>
            <div class="col-md-3">
                <div class="metric-card">
                    <p class="metric-label">Available Balance</p>
                    <h3 class="metric-value text-primary">$<%= user.walletBalance.toFixed(2) %></h3>
                    <small class="text-muted">Trading power</small>
                </div>
            </div>
        </div>

        <!-- Holdings Table -->
        <div class="card">
            <div class="card-header bg-white d-flex justify-content-between align-items-center py-3">
                <h4 class="mb-0">Current Holdings</h4>
                <div class="btn-group">
                    <button class="btn btn-outline-primary btn-sm" onclick="refreshPrices()">
                        <i class="bi bi-arrow-clockwise"></i> Refresh Prices
                    </button>
                </div>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover align-middle">
                        <thead>
                            <tr>
                                <th>Symbol</th>
                                <th>Company</th>
                                <th class="text-end">Quantity</th>
                                <th class="text-end">Buy Price</th>
                                <th class="text-end">Current Price</th>
                                <th class="text-end">Market Value</th>
                                <th class="text-end">Profit/Loss</th>
                                <th class="text-end">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% if (portfolio.holdings && portfolio.holdings.length > 0) { %>
                                <% portfolio.holdings.forEach(holding => { %>
                                    <tr>
                                        <td>
                                            <strong><%= holding.symbol %></strong>
                                        </td>
                                        <td><%= holding.companyName %></td>
                                        <td class="text-end"><%= holding.quantity %></td>
                                        <td class="text-end">$<%= holding.avgPrice.toFixed(2) %></td>
                                        <td class="text-end">
                                            $<%= holding.currentPrice.toFixed(2) %>
                                            <% if (holding.priceChange) { %>
                                                <small class="ms-1 <%= holding.priceChange >= 0 ? 'text-success' : 'text-danger' %>">
                                                    (<%= holding.priceChange >= 0 ? '+' : '' %><%= holding.priceChange.toFixed(2) %>%)
                                                </small>
                                            <% } %>
                                        </td>
                                        <td class="text-end">$<%= holding.currentValue.toFixed(2) %></td>
                                        <td class="text-end <%= holding.profitLoss >= 0 ? 'text-success' : 'text-danger' %>">
                                            <%= holding.profitLoss >= 0 ? '+' : '' %>$<%= holding.profitLoss.toFixed(2) %>
                                            <br>
                                            <small>(<%= holding.profitLossPercent.toFixed(2) %>%)</small>
                                        </td>
                                        <td class="text-end">
                                            <div class="btn-group stock-action">
                                                <button class="btn btn-sm btn-outline-primary" onclick="openTradeModal('buy', '<%= holding.symbol %>', <%= holding.currentPrice %>, '<%= holding.companyName.replace(/'/g, "\\'") %>')">
                                                    Buy
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger" onclick="openTradeModal('sell', '<%= holding.symbol %>', <%= holding.currentPrice %>, '<%= holding.companyName.replace(/'/g, "\\'") %>')">
                                                    Sell
                                                </button>
                                                <button class="btn btn-sm btn-outline-secondary" onclick="addToWatchlist('<%= holding.symbol %>')">
                                                    <i class="bi bi-star"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                <% }); %>
                            <% } else { %>
                                <tr>
                                    <td colspan="8" class="text-center py-4">
                                        <p class="text-muted mb-0">No holdings found. Start trading to build your portfolio!</p>
                                    </td>
                                </tr>
                            <% } %>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Trade Modal -->
    <%- include('partials/trade-modal') %>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        let currentWalletBalance = <%= user.walletBalance %>;
        const tradeModal = new bootstrap.Modal(document.getElementById('tradeModal'));
        const tradeSuccessModal = new bootstrap.Modal(document.getElementById('tradeSuccessModal'));

        function refreshPrices() {
            location.reload();
        }

        function openTradeModal(type, symbol, currentPrice, companyName) {
            // Reset form
            document.getElementById('tradeForm').reset();
            document.getElementById('tradeAlert').classList.add('d-none');
            
            // Set form values
            document.getElementById('type').value = type;
            document.getElementById('symbol').value = symbol;
            document.getElementById('companyName').value = companyName;
            document.getElementById('displayCompanyName').value = companyName;
            document.getElementById('currentPrice').value = currentPrice.toFixed(2);
            document.getElementById('availableBalance').value = currentWalletBalance.toFixed(2);
            
            // Update modal title and button
            document.getElementById('tradeModalLabel').textContent = type === 'buy' ? 'Buy Stock' : 'Sell Stock';
            const executeBtn = document.getElementById('executeTradeBtn');
            executeBtn.textContent = type === 'buy' ? 'Buy Stock' : 'Sell Stock';
            executeBtn.className = `btn ${type === 'buy' ? 'btn-success' : 'btn-danger'}`;
            
            // Show modal
            tradeModal.show();
            
            // Set up quantity change handler
            document.getElementById('quantity').addEventListener('input', updateTotalValue);
        }

        function updateTotalValue() {
            const quantity = parseFloat(document.getElementById('quantity').value) || 0;
            const currentPrice = parseFloat(document.getElementById('currentPrice').value);
            const totalValue = quantity * currentPrice;
            document.getElementById('totalValue').value = totalValue.toFixed(2);
        }

        async function executeTrade(event) {
            event.preventDefault();
            
            const executeBtn = document.getElementById('executeTradeBtn');
            executeBtn.disabled = true;
            
            try {
                const formData = {
                    type: document.getElementById('type').value,
                    symbol: document.getElementById('symbol').value,
                    quantity: parseInt(document.getElementById('quantity').value),
                    price: parseFloat(document.getElementById('currentPrice').value),
                    companyName: document.getElementById('companyName').value
                };

                const response = await fetch('/trade/execute', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });

                const data = await response.json();

                if (response.ok) {
                    // Update wallet balance
                    currentWalletBalance = data.newBalance;
                    document.querySelector('.wallet-balance').textContent = `$${data.newBalance.toFixed(2)}`;
                    
                    // Show success message
                    document.getElementById('successMessage').textContent = data.message;
                    document.getElementById('successDetails').innerHTML = `
                        <p>Order Details:</p>
                        <ul>
                            <li>Type: ${data.order.type}</li>
                            <li>Symbol: ${data.order.symbol}</li>
                            <li>Quantity: ${data.order.quantity}</li>
                            <li>Price: $${data.order.price.toFixed(2)}</li>
                            <li>Total: $${data.order.total.toFixed(2)}</li>
                            <li>Date: ${new Date(data.order.date).toLocaleString()}</li>
                        </ul>
                    `;
                    
                    // Hide trade modal and show success modal
                    tradeModal.hide();
                    tradeSuccessModal.show();
                    
                    // Reload page after 2 seconds to show updated holdings
                    setTimeout(() => {
                        location.reload();
                    }, 2000);
                } else {
                    throw new Error(data.message || 'Failed to execute trade');
                }
            } catch (error) {
                const alertDiv = document.getElementById('tradeAlert');
                alertDiv.textContent = error.message;
                alertDiv.classList.remove('d-none', 'alert-success');
                alertDiv.classList.add('alert-danger');
            } finally {
                executeBtn.disabled = false;
            }
        }

        function addToWatchlist(symbol) {
            // TODO: Implement watchlist functionality
            alert('Coming soon: Add ' + symbol + ' to watchlist');
        }
    </script>
</body>
</html>